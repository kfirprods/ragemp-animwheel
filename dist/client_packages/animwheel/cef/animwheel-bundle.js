!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},a=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],s=0,a=o.length;s<a;s++,i++)r[i]=o[s];return r};Object.defineProperty(t,"__esModule",{value:!0});var c=n(1),l=function(e){function t(t){var n=e.call(this,t.slot,t.animation,function(e){switch(e.toLowerCase()){case"items":e="smoking";break;case"gestures":e="expressions"}return"assets/img/categories/"+e.toLowerCase()+".svg"}(t.category))||this;return n.favoriteAnimation=t,n}return i(t,e),t}(function(){function e(e,t,n){this.id=e,this.text=t,this.icon=n}return e.prototype.setPosition=function(e,t){this.x=e,this.y=t},e}()),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.wheelItemFactory=function(e){return new l(e)},t}(function(){function e(e){this.containerRadius=e,this.radius=e-48,this.items=new Array}return e.prototype.getPositionForItem=function(e,t){var n=Math.max(5,t),r=2*Math.PI/n;return r*=e,r-=Math.PI/2,[this.radius+this.radius*Math.cos(r),this.radius+this.radius*Math.sin(r)]},e.prototype.positionItems=function(){for(var e=0;e<this.items.length;e++){var t=this.getPositionForItem(e,this.items.length),n=t[0],r=t[1];this.items[e].setPosition(n,r)}},e.prototype.insertItems=function(e,t){var n,r=this;return void 0===t&&(t=0),(n=this.items).splice.apply(n,a([t,0],e.map((function(e){return r.wheelItemFactory(e)})))),this.positionItems(),this.items.slice(t,e.length)},e.prototype.addItems=function(e){return this.insertItems(e,this.items.length)},e.prototype.addItem=function(e){return this.addItems(new Array(e))[0]},e.prototype.replaceItem=function(e,t){var n=this.items.indexOf(e),r=this.items[n],i=this.wheelItemFactory(t);return i.setPosition(r.x,r.y),this.items.splice(n,1,i),[r,i]},e}());new(function(){function e(e){this.animationDataProvider=e}return e.prototype.handleItemHover=function(e){$("#current-wheelitem-name").css("visibility","visible"),$("#current-wheelitem-name").text(e.text)},e.prototype.handleItemClicked=function(e){var t=e;this.animationDataProvider.playAnimation(t.favoriteAnimation.animation)},e.prototype.handleItemEdit=function(e){var t=this,n=e;$("#apply-edit-button").unbind("click"),$("#cancel-edit-button").unbind("click"),this.animationDataProvider.notifyEditorVisibility(!0),$("#item-editor").show(),$("#item-editor").css("display","flex"),$("#edit-text").val(n.favoriteAnimation.animation),$("#editor-current-animation-label").text(n.favoriteAnimation.animation),$("#edit-text").focus(),$("#editor-current-animation-label").val(n.favoriteAnimation.animation),$("#apply-edit-button").unbind("click"),$("#cancel-edit-button").unbind("click"),$("#edit-text").unbind("keypress"),$("#apply-edit-button").click((function(){t.handleEditApply(n)})),$("#cancel-edit-button").click((function(){t.handleEditCancel()})),$("#edit-text").keypress((function(e){13==(e.keyCode||e.which)&&t.handleEditApply(n)})),this.animationDataProvider.OnEscape.on((function(){t.handleEditCancel()}))},e.prototype.handleStopAnimation=function(){this.animationDataProvider.stopAnimation()},e.prototype.createWheelItemContainerFromTemplate=function(e){var t=this,n=$('<div data-id="'+e.id+'">');return n.loadTemplate($("#wheelitem-template"),e),n.css("position","absolute"),n.css("left",e.x+"px"),n.css("top",e.y+"px"),n.css("width","96px"),n.css("height","96px"),n.mouseenter((function(){t.handleItemHover(e)})),n.find(".wheelitem-circle-container").click((function(){t.handleItemClicked(e)})),n.find(".wheelitem-edit-button").click((function(){t.handleItemEdit(e)})),n},e.prototype.replaceExistingWheelItem=function(e,t){var n=$("#wheel-container");$('div[data-id="'+e.id+'"]').remove(),this.createWheelItemContainerFromTemplate(t).appendTo(n)},e.prototype.createWheel=function(e){var t=this,n=$("#wheel-container"),r=e.length/2*112,i=Math.max(r,n.height());n.css({left:($(window).width()-i)/2,top:($(window).height()-i)/2,width:i,height:i}),$(".current-wheelitem").css("top",i/2+"px"),$(".current-wheelitem").show(),$("#stop-anim-btn").click((function(){t.handleStopAnimation()}));var o=new u(n.width()/2);return o.addItems(e).forEach((function(e){t.createWheelItemContainerFromTemplate(e).appendTo(n)})),o},e.prototype.setupWheel=function(){return o(this,void 0,void 0,(function(){var e;return s(this,(function(t){switch(t.label){case 0:return[4,this.animationDataProvider.getFavoriteAnimations()];case 1:return e=(e=t.sent()).sort((function(e){return e.slot})),this.wheel=this.createWheel(e),[2]}}))}))},e.prototype.handleEditApply=function(e){var t=this,n=$("#edit-text").val();$("#loading-spinner").css("visibility","visible"),this.animationDataProvider.updateFavoriteAnimation(e.favoriteAnimation.slot,n).then((function(n){var r=t.wheel.replaceItem(e,n);t.replaceExistingWheelItem(r[0],r[1]),$("#editor-error-message").css("visibility","hidden"),$("#edit-text").val(""),$("#item-editor").hide(),$("#loading-spinner").css("visibility","hidden"),t.animationDataProvider.notifyEditorVisibility(!1)})).catch((function(e){console.log(e),$("#editor-error-message").css("visibility","visible"),$("#loading-spinner").css("visibility","hidden")}))},e.prototype.handleEditCancel=function(){$("#editor-error-message").css("visibility","hidden"),$("#edit-text").val(""),$("#item-editor").hide(),this.animationDataProvider.notifyEditorVisibility(!1)},e}())(new c.RageRpcAnimationDataProvider).setupWheel()},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(2)),c=s(n(3)),l=s(n(4)),u=s(n(5)),p=function(){function e(){var e=this;this.onEscape=new l.default,a.register("UpdateFavoriteAnimation_Success",(function(t){e.handleUpdateSuccess(t)})),a.register("UpdateFavoriteAnimation_Failed",(function(t){e.handleUpdateFailed(t)})),a.register("EscapeClicked",(function(){e.onEscape.trigger()}))}return e.prototype.getFavoriteAnimations=function(){return r(this,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return[4,a.callClient("Animwheel_GetFavoriteAnimations")];case 1:return[2,e.sent()]}}))}))},e.prototype.updateFavoriteAnimation=function(e,t){return this.updatePromise=new c.default((function(){a.callClient("Animwheel_UpdateFavoriteAnimation",{slotIndex:e,animationActionName:t})})),this.updatePromise.underlyingPromise},e.prototype.playAnimation=function(e){a.callClient("Animwheel_PlayAnimation",e)},e.prototype.stopAnimation=function(){a.callClient("Animwheel_StopAnimation")},e.prototype.notifyEditorVisibility=function(e){a.callClient("Animwheel_EditorVisibilityChanged",e)},Object.defineProperty(e.prototype,"OnEscape",{get:function(){return this.onEscape.expose()},enumerable:!0,configurable:!0}),e.prototype.handleUpdateSuccess=function(e){this.updatePromise&&this.updatePromise.resolve(e)},e.prototype.handleUpdateFailed=function(e){this.updatePromise&&this.updatePromise.reject(new u.default(e))},e}();t.RageRpcAnimationDataProvider=p},function(e,t,n){"undefined"!=typeof self&&self,e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){"use strict";var r;function i(e,t){const n="client"===s();if(e&&"object"==typeof e&&void 0!==e.id){const i=(t,r,i)=>n?e.type===t&&r.at(e.id)===e:e instanceof i;switch(t){case r.Blip:return i("blip",mp.blips,mp.Blip);case r.Checkpoint:return i("checkpoint",mp.checkpoints,mp.Checkpoint);case r.Colshape:return i("colshape",mp.colshapes,mp.Colshape);case r.Label:return i("textlabel",mp.labels,mp.TextLabel);case r.Marker:return i("marker",mp.markers,mp.Marker);case r.Object:return i("object",mp.objects,mp.Object);case r.Pickup:return i("pickup",mp.pickups,mp.Pickup);case r.Player:return i("player",mp.players,mp.Player);case r.Vehicle:return i("vehicle",mp.vehicles,mp.Vehicle)}}return!1}function o(){const e=46656*Math.random()|0,t=46656*Math.random()|0;return("000"+e.toString(36)).slice(-3)+("000"+t.toString(36)).slice(-3)}function s(){return mp.joaat?"server":mp.game&&mp.game.joaat?"client":mp.trigger?"cef":void 0}function a(e){const t=s();return JSON.stringify(e,(e,n)=>{if("client"===t||"server"===t&&n&&"object"==typeof n){let e;if(i(n,r.Blip)?e=r.Blip:i(n,r.Checkpoint)?e=r.Checkpoint:i(n,r.Colshape)?e=r.Colshape:i(n,r.Marker)?e=r.Marker:i(n,r.Object)?e=r.Object:i(n,r.Pickup)?e=r.Pickup:i(n,r.Player)?e=r.Player:i(n,r.Vehicle)&&(e=r.Vehicle),e)return{__t:e,i:"number"==typeof n.remoteId?n.remoteId:n.id}}return n})}function c(e){const t=s();return JSON.parse(e,(e,n)=>{if(("client"===t||"server"===t)&&n&&"object"==typeof n&&"string"==typeof n.__t&&"number"==typeof n.i&&2===Object.keys(n).length){const e=n.i;let i;switch(n.__t){case r.Blip:i=mp.blips;break;case r.Checkpoint:i=mp.checkpoints;break;case r.Colshape:i=mp.colshapes;break;case r.Label:i=mp.labels;break;case r.Marker:i=mp.markers;break;case r.Object:i=mp.objects;break;case r.Pickup:i=mp.pickups;break;case r.Player:i=mp.players;break;case r.Vehicle:i=mp.vehicles}if(i)return i["client"===t?"atRemoteId":"at"](e)}return n})}function l(e){return new Promise(t=>setTimeout(()=>t(e),0))}function u(e){return new Promise((t,n)=>setTimeout(()=>n(e),0))}function p(e,t){return"number"==typeof t?Promise.race([new Promise((e,n)=>{setTimeout(()=>n("TIMEOUT"),t)}),e]):e}function f(e){try{e.url}catch(e){return!1}return!0}n.d(t,"h",(function(){return o})),n.d(t,"a",(function(){return s})),n.d(t,"g",(function(){return a})),n.d(t,"c",(function(){return c})),n.d(t,"e",(function(){return l})),n.d(t,"d",(function(){return u})),n.d(t,"f",(function(){return p})),n.d(t,"b",(function(){return f})),function(e){e.Blip="b",e.Checkpoint="cp",e.Colshape="c",e.Label="l",e.Marker="m",e.Object="o",e.Pickup="p",e.Player="pl",e.Vehicle="v"}(r||(r={}))},function(e,t,n){"use strict";n.r(t),function(e){n.d(t,"register",(function(){return m})),n.d(t,"unregister",(function(){return g})),n.d(t,"call",(function(){return v})),n.d(t,"callServer",(function(){return w})),n.d(t,"callClient",(function(){return _})),n.d(t,"callBrowsers",(function(){return k})),n.d(t,"callBrowser",(function(){return O})),n.d(t,"on",(function(){return $})),n.d(t,"off",(function(){return C})),n.d(t,"trigger",(function(){return E})),n.d(t,"triggerClient",(function(){return A})),n.d(t,"triggerServer",(function(){return B})),n.d(t,"triggerBrowsers",(function(){return S})),n.d(t,"triggerBrowser",(function(){return R}));var r=n(0);const i=r.a();if(!i)throw"Unknown RAGE environment";const o="PROCEDURE_NOT_FOUND",s="__rpc:id",a="__rpc:process",c="__rpc:browserRegister",l="__rpc:browserUnregister",u="__rpc:triggerEvent",p="__rpc:triggerEventBrowsers",f="cef"===i?window:e;if(!f[a]){if(f.__rpcListeners={},f.__rpcPending={},f.__rpcEvListeners={},f[a]=(e,t)=>{"server"!==i&&(t=e);const n=r.c(t);if(n.req){const t={id:n.id,environment:n.fenv||n.env};"server"===i&&(t.player=e);const o={ret:1,id:n.id,env:i};let s;switch(i){case"server":s=e=>t.player.call(a,[r.g(e)]);break;case"client":if("server"===n.env)s=e=>mp.events.callRemote(a,r.g(e));else if("cef"===n.env){const e=n.b&&f.__rpcBrowsers[n.b];t.browser=e,s=t=>e&&r.b(e)&&d(e,t,!0)}break;case"cef":s=e=>mp.trigger(a,r.g(e))}if(s){const e=h(n.name,n.args,t);n.noRet||e.then(e=>s({...o,res:e})).catch(e=>s({...o,err:e}))}}else if(n.ret){const t=f.__rpcPending[n.id];if("server"===i&&t.player!==e)return;t&&(t.resolve(n.err?r.d(n.err):r.e(n.res)),delete f.__rpcPending[n.id])}},"cef"!==i){if(mp.events.add(a,f[a]),"client"===i){m("__rpc:callServer",([e,t,n],r)=>y(e,t,{fenv:r.environment,noRet:n})),m("__rpc:callBrowsers",([e,t,n],r)=>x(null,e,t,{fenv:r.environment,noRet:n})),f.__rpcBrowsers={};const e=e=>{const t=r.h();Object.keys(f.__rpcBrowsers).forEach(t=>{const n=f.__rpcBrowsers[t];n&&r.b(n)&&n!==e||delete f.__rpcBrowsers[t]}),f.__rpcBrowsers[t]=e,e.execute(`\n                    window.name = '${t}';\n                    if(typeof window['${s}'] === 'undefined'){\n                        window['${s}'] = Promise.resolve(window.name);\n                    }else{\n                        window['${s}:resolve'](window.name);\n                    }\n                `)};mp.browsers.forEach(e),mp.events.add("browserCreated",e),f.__rpcBrowserProcedures={},mp.events.add(c,e=>{const[t,n]=JSON.parse(e);f.__rpcBrowserProcedures[n]=t}),mp.events.add(l,e=>{const[t,n]=JSON.parse(e);f.__rpcBrowserProcedures[n]===t&&delete f.__rpcBrowserProcedures[n]}),m(p,([e,t],n)=>{Object.values(f.__rpcBrowsers).forEach(r=>{P(r,u,[e,t],{fenv:n.environment,noRet:1})})})}}else void 0===f[s]&&(f[s]=new Promise(e=>{window.name?e(window.name):f[s+":resolve"]=e}));m(u,([e,t],n)=>j(e,t,n))}function d(e,t,n){const i=r.g(t);e.execute(`var process = window["${a}"]; if(process){ process(${JSON.stringify(i)}); }else{ ${n?"":`mp.trigger("${a}", '{"ret":1,"id":"${t.id}","err":"${o}","env":"cef"}');`} }`)}function h(e,t,n){const i=f.__rpcListeners[e];return i?r.e(i(t,n)):r.d(o)}function m(e,t){if(2!==arguments.length)throw'register expects 2 arguments: "name" and "cb"';return"cef"===i&&f[s].then(t=>mp.trigger(c,JSON.stringify([t,e]))),f.__rpcListeners[e]=t,()=>g(e)}function g(e){if(1!==arguments.length)throw'unregister expects 1 argument: "name"';"cef"===i&&f[s].then(t=>mp.trigger(l,JSON.stringify([t,e]))),f.__rpcListeners[e]=void 0}function v(e,t,n={}){return arguments.length<1||arguments.length>3?r.d('call expects 1 to 3 arguments: "name", optional "args", and optional "options"'):r.f(h(e,t,{environment:i}),n.timeout)}function y(e,t,n={}){switch(i){case"server":return v(e,t);case"client":{const o=r.h();return new Promise(s=>{n.noRet||(f.__rpcPending[o]={resolve:s});const c={req:1,id:o,name:e,env:i,args:t,...n};mp.events.callRemote(a,r.g(c))})}case"cef":return _("__rpc:callServer",[e,t,+n.noRet])}}function w(e,t,n={}){if(arguments.length<1||arguments.length>3)return r.d('callServer expects 1 to 3 arguments: "name", optional "args", and optional "options"');let i={};return n.noRet&&(i.noRet=1),r.f(y(e,t,i),n.timeout)}function b(e,t,n,o={}){switch(i){case"client":return v(t,n);case"server":{const s=r.h();return new Promise(c=>{o.noRet||(f.__rpcPending[s]={resolve:c,player:e});const l={req:1,id:s,name:t,env:i,args:n,...o};e.call(a,[r.g(l)])})}case"cef":{const e=r.h();return f[s].then(s=>new Promise(c=>{o.noRet||(f.__rpcPending[e]={resolve:c});const l={b:s,req:1,id:e,name:t,env:i,args:n,...o};mp.trigger(a,r.g(l))}))}}}function _(e,t,n,o={}){switch(i){case"client":if(o=n||{},n=t,t=e,e=null,arguments.length<1||arguments.length>3||"string"!=typeof t)return r.d('callClient from the client expects 1 to 3 arguments: "name", optional "args", and optional "options"');break;case"server":if(arguments.length<2||arguments.length>4||"object"!=typeof e)return r.d('callClient from the server expects 2 to 4 arguments: "player", "name", optional "args", and optional "options"');break;case"cef":if(o=n||{},n=t,t=e,e=null,arguments.length<1||arguments.length>3||"string"!=typeof t)return r.d('callClient from the browser expects 1 to 3 arguments: "name", optional "args", and optional "options"')}let s={};return o.noRet&&(s.noRet=1),r.f(b(e,t,n,s),o.timeout)}function P(e,t,n,o={}){return new Promise(s=>{const a=r.h();o.noRet||(f.__rpcPending[a]={resolve:s}),d(e,{req:1,id:a,name:t,env:i,args:n,...o},!1)})}function x(e,t,n,s={}){switch(i){case"client":const i=f.__rpcBrowserProcedures[t];if(!i)return r.d(o);const a=f.__rpcBrowsers[i];return a&&r.b(a)?P(a,t,n,s):r.d(o);case"server":return b(e,"__rpc:callBrowsers",[t,n,+s.noRet],s);case"cef":return b(null,"__rpc:callBrowsers",[t,n,+s.noRet],s)}}function k(e,t,n,o={}){let s,a={};switch(i){case"client":case"cef":if(o=n||{},n=t,t=e,arguments.length<1||arguments.length>3)return r.d('callBrowsers from the client or browser expects 1 to 3 arguments: "name", optional "args", and optional "options"');o.noRet&&(a.noRet=1),s=x(null,t,n,a);break;case"server":if(arguments.length<2||arguments.length>4)return r.d('callBrowsers from the server expects 2 to 4 arguments: "player", "name", optional "args", and optional "options"');o.noRet&&(a.noRet=1),s=x(e,t,n,a)}if(s)return r.f(s,o.timeout)}function O(e,t,n,o={}){if("client"!==i)return r.d("callBrowser can only be used in the client environment");if(arguments.length<2||arguments.length>4)return r.d('callBrowser expects 2 to 4 arguments: "browser", "name", optional "args", and optional "options"');let s={};return o.noRet&&(s.noRet=1),r.f(P(e,t,n,s),o.timeout)}function j(e,t,n){const r=f.__rpcEvListeners[e];r&&r.forEach(e=>e(t,n))}function $(e,t){if(2!==arguments.length)throw'on expects 2 arguments: "name" and "cb"';const n=f.__rpcEvListeners[e]||new Set;return n.add(t),f.__rpcEvListeners[e]=n,()=>C(e,t)}function C(e,t){if(2!==arguments.length)throw'off expects 2 arguments: "name" and "cb"';const n=f.__rpcEvListeners[e];n&&n.delete(t)}function E(e,t){if(arguments.length<1||arguments.length>2)throw'trigger expects 1 or 2 arguments: "name", and optional "args"';j(e,t,{environment:i})}function A(e,t,n){switch(i){case"client":if(n=t,t=e,e=null,arguments.length<1||arguments.length>2||"string"!=typeof t)throw'triggerClient from the client expects 1 or 2 arguments: "name", and optional "args"';break;case"server":if(arguments.length<2||arguments.length>3||"object"!=typeof e)throw'triggerClient from the server expects 2 or 3 arguments: "player", "name", and optional "args"';break;case"cef":if(n=t,t=e,e=null,arguments.length<1||arguments.length>2||"string"!=typeof t)throw'triggerClient from the browser expects 1 or 2 arguments: "name", and optional "args"'}b(e,u,[t,n],{noRet:1})}function B(e,t){if(arguments.length<1||arguments.length>2)throw'triggerServer expects 1 or 2 arguments: "name", and optional "args"';y(u,[e,t],{noRet:1})}function S(e,t,n){switch(i){case"client":case"cef":if(n=t,t=e,e=null,arguments.length<1||arguments.length>2)throw'triggerBrowsers from the client or browser expects 1 or 2 arguments: "name", and optional "args"';break;case"server":if(arguments.length<2||arguments.length>3)throw'triggerBrowsers from the server expects 2 or 3 arguments: "player", "name", and optional "args"'}b(e,p,[t,n],{noRet:1})}function R(e,t,n){if("client"!==i)throw"callBrowser can only be used in the client environment";if(arguments.length<2||arguments.length>4)throw'callBrowser expects 2 or 3 arguments: "browser", "name", and optional "args"';P(e,u,[t,n],{noRet:1})}t.default={register:m,unregister:g,call:v,callServer:w,callClient:_,callBrowsers:k,callBrowser:O,on:$,off:C,trigger:E,triggerServer:B,triggerClient:A,triggerBrowsers:S,triggerBrowser:R}}.call(this,n(2))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n}])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){var t=this;this.underlyingPromise=new Promise((function(n,r){t.reject=r,t.resolve=n,e()}))};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.handlers=[]}return e.prototype.on=function(e){this.handlers.push(e)},e.prototype.off=function(e){this.handlers=this.handlers.filter((function(t){return t!==e}))},e.prototype.trigger=function(e){this.handlers.slice(0).forEach((function(t){return t(e)}))},e.prototype.expose=function(){return this},e}();t.default=r},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t}(Error);t.default=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,